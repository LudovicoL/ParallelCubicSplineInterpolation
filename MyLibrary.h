#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

#define H_COLUMNS 3																// number of columns of H matrix
#define DBL_EPSILON 0.00001														// to compare two double
#define IS_EQUAL(x, y) 			(((fabs(x-y)) < (DBL_EPSILON)) ? (1) : (0))		// to compare two double


void create_counts_and_displs_with_replications (
	int rank,							/* IN - Process rank */
	int p,								/* IN - Number of processes */
	int n,								/* IN - Total number of elements */
	int replication,					/* IN - To replicate or not data between the processes */
	int **count,						/* OUT - Array of counts */
	int **disp							/* OUT - Array of displacements */
);
void parallelThomasAlgorithm (
	int rank,							/* IN - Process rank */
	int p,								/* IN - Number of processes */
	int n,								/* IN - Total elements */
	int total_partial_size,				/* IN - Total number of elements for partition */
	int effective_partial_size,			/* IN - Effective number of elements for partition */
	double *xi,							/* IN - Array of distributed xi */
	double *yi,							/* IN - Array of distributed yi */
	double **m							/* OUT - H Ã— m = r - unknowns array */
);
void parallelCubicSplineInterpolation (
	int rank,							/* IN - Process rank */
	int p,								/* IN - Number of processes */
	double step,						/* IN - Step to generate numbers */
	int effective_partial_size,			/* IN - Effective number of elements for partition */
	double *xi,							/* IN - Array of distributed xi */
	double *yi,							/* IN - Array of distributed yi */
	double *m,							/* IN - Unknowns array */
	double **x,							/* OUT - Coordinate x of Cubic Spline Interpolation */
	double **fx,						/* OUT - Coordinate y of Cubic Spline Interpolation */
	int *sigma_i						/* OUT - Intervals generated by processes */
);
